generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String
  memberships   Membership[]
  tickets       Ticket[]
  invitations   Invitation[]
}

model Invitation {
  email           String
  tokenHash       String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  invitedByUser   User?           @relation(fields: [invitedByUserId], references: [id], onDelete: SetNull)
  invitedByUserId String?

  @@index([organizationId])
}

model Membership {
  organization        Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String

  joinedAt   DateTime    @default(now())
  isActive   Boolean
  membershipRole    MembershipRole     @default(MEMBER)



  canDeleteTicket  Boolean   @default(true)
  @@id(name: "membershipId", [organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

enum MembershipRole {
  MEMBER
  ADMIN
}

model User {
  id                  String                @id @default(cuid())
  username            String                @unique
  email               String                @unique
  emailVerified       Boolean               @default(false)
  passwordHash        String
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  memberships         Membership[]
  sessions            Session[]
  firstName           String?
  lastName            String?
  comments            Comment[]
  tickets             Ticket[]
  invitesByUser       Invitation[]

}

model EmailVerificationToken {
  id         String      @id   @default(cuid())
  code       String
  email      String
  expiresAt  DateTime
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model PasswordResetToken {
  tokenHash  String   @id
  expiresAt  DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Session {
  id          String    @id
  expiresAt   DateTime
  userId      String
  refreshedAt DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Ticket {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  title     String
  content   String       @db.VarChar(1024)
  status    TicketStatus @default(OPEN)
  bounty    Int
  deadline  String
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId   String

  @@index([userId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}

model Comment {
  id          String     @id   @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  content     String     @db.VarChar(1024)
  userId      String?
  ticketId    String
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  ticket      Ticket     @relation(fields: [ticketId], references: [id], onDelete: Cascade )

  @@index([ticketId])
  @@index([userId])
}
