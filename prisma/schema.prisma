generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String
  memberships   Membership[]
  tickets       Ticket[]
  invitations   Invitation[]
  credentials   Credential[]
  stripeCustomer StripeCustomer?
  stripeCustomerId String?

  creatorUserId String?
  creatorUser User? @relation("OrganizationCreator", fields: [creatorUserId], references: [id], onDelete: SetNull)

  deprovisioningQueue DeprovisioningQueue[]
}

model StripeCustomer {
    organizationId String   @unique
    organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    customerId   String   @unique
    subscriptionId  String?
    subscriptionStatus StripeSubscriptionStatus?
    productId String?
    priceId String?
    eventAt            Int?
}

enum StripeSubscriptionStatus {
  active
  incomplete
  incomplete_expired
  past_due
  canceled
  unpaid
  trialed
  paused
}

model Credential {
    id  String  @id @default(cuid())
    createdAt   DateTime   @default(now())
    secretHash  String  @unique
    name   String
    type   CredentialType @default(API)
    lastUsed   DateTime?
    organization  Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    organizationId String
    revokedAt DateTime?

    @@index([organizationId])
    @@index([type])
}

enum CredentialType {
  API
  MCP
  MCP_READ_ONLY
  CLI
  WEBHOOK
}

model Invitation {
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  tokenHash       String           @unique
  email           String
  organization    Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String
  invitedByUser   User?            @relation(fields: [invitedByUserId], references: [id], onDelete: SetNull)
  invitedByUserId String?
  status          InvitationStatus @default(PENDING)
  
  // Track ticket that prompted membership request
  requestedFromTicketId String?
  requestedFromTicket   Ticket? @relation("InvitationFromTicket", fields: [requestedFromTicketId], references: [id], onDelete: SetNull)

  @@id(name: "invitationId", [organizationId, email])
  @@index([organizationId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED_WITHOUT_ACCOUNT
  REQUESTED
}

model Membership {
  organization        Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId      String
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String

  joinedAt   DateTime    @default(now())
  isActive   Boolean
  membershipRole    MembershipRole     @default(MEMBER)



  canDeleteTicket  Boolean   @default(true)
  canUpdateTicket  Boolean   @default(true)
  canResolveTickets Boolean  @default(true)
  @@id(name: "membershipId", [organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model DeprovisioningQueue {
  id   String  @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scheduledFor DateTime
  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId String

  reason  DeprovisioningReason
  status  DeprovisioningStatus  @default(PENDING)

  originalScheduledFor DateTime
  extensionGranted   Boolean  @default(false)
  extensionReason    String?
  extendedBy         String?

  notificationsSent   Int  @default(0)
  lastNotificationAt  DateTime?

  @@index([organizationId])
  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
  @@unique([organizationId, userId])
}

enum DeprovisioningReason {
  SUBSCRIPTION_DOWNGRADE
  SUBSCRIPTION_CANCELLED
  PLAN_LIMIT_EXCEEDED
  MANUAL_ADMIN_REQUEST
}

enum DeprovisioningStatus {
PENDING
NOTIFIED_ONCE
NOTIFIED_REMINDER
NOTIFIED_FINAL
COMPLETED
CANCELED_UPGRADE
CANCELED_MANUAL
CANCELED_USER_LEFT
}

enum MembershipRole {
  MEMBER
  ADMIN
}

model User {
  id                  String                @id @default(cuid())
  username            String                @unique
  email               String                @unique
  emailVerified       Boolean               @default(false)
  passwordHash        String
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  memberships         Membership[]
  sessions            Session[]
  firstName           String?
  lastName            String?
  comments            Comment[]
  tickets             Ticket[]
  invitesByUser       Invitation[]
  emailChangeTokens   EmailChangeToken[]
  solvedTickets       Ticket[]              @relation("TicketSolver")
  publicTicketRequests Ticket[]             @relation("TicketPublicRequester")

  createdOrganizations Organization[] @relation("OrganizationCreator")
}

model EmailChangeToken {
  id         String      @id   @default(cuid())
  code       String
  newEmail   String
  expiresAt  DateTime
  userId     String
  createdAt  DateTime    @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([newEmail])
}

model EmailVerificationToken {
  id         String      @id   @default(cuid())
  code       String
  email      String
  expiresAt  DateTime
  userId     String
  createdAt  DateTime    @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model PasswordResetToken {
  tokenHash  String   @id
  expiresAt  DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Session {
  id          String    @id
  expiresAt   DateTime
  userId      String
  refreshedAt DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Ticket {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  title     String
  content   String       @db.VarChar(1024)
  status    TicketStatus @default(OPEN)
  bounty    Int
  deadline  String

  // Ticket creator
  userId    String?
  user      User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Bounty resolution tracking
  solvedByUserId String?
  solvedBy       User?     @relation("TicketSolver", fields: [solvedByUserId], references: [id], onDelete: SetNull)
  solvedAt       DateTime?
  bountyPaidAt   DateTime?
  bountyApproved Boolean   @default(false)

  // Public visibility (irreversible)
  isPublic           Boolean   @default(false)
  publishedAt        DateTime?
  publicRequestedAt  DateTime?
  publicRequestedBy  String?
  publicRequestedByUser User? @relation("TicketPublicRequester", fields: [publicRequestedBy], references: [id], onDelete: SetNull)

  comments  Comment[]
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId   String
  attachments   Attachment[]
  referencedTickets Ticket[] @relation("TicketReferences")  
  referencingTickets Ticket[] @relation("TicketReferences")
  invitationRequests Invitation[] @relation("InvitationFromTicket")

  @@index([userId])
  @@index([solvedByUserId])
  @@index([isPublic])
  @@index([publicRequestedAt])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}

model Attachment {
  id        String @id @default(cuid())
  name      String
  s3Key       String    @default("") // S3 object key for original file
  thumbnailKey String?  // S3 object key for thumbnail
  thumbnailUrl String?  // (legacy) keep for compatibility, will mirror thumbnailKey
  blobUrl      String?  // Vercel Blob URL for original file
  blobPath     String?  // Vercel Blob path (for deletion)

  entity    AttachmentEntity
  ticket    Ticket?  @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String?
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([commentId])
}

enum AttachmentEntity {
  TICKET
  COMMENT
}

model Comment {
  id          String     @id   @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  content     String     @db.VarChar(1024)
  userId      String?
  ticketId    String
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  ticket      Ticket     @relation(fields: [ticketId], references: [id], onDelete: Cascade )
  attachments Attachment[]

  @@index([ticketId])
  @@index([userId])
}


