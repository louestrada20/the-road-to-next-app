generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String                @id @default(cuid())
  username            String                @unique
  email               String                @unique
  emailVerified       Boolean               @default(false)
  passwordHash        String
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  sessions            Session[]
  firstName           String?
  lastName            String?
  comments            Comment[]
  tickets             Ticket[]

}

model EmailVerificationToken {
  id         String      @id   @default(cuid())
  code       String
  email      String
  expiresAt  DateTime
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model PasswordResetToken {
  tokenHash  String   @id
  expiresAt  DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Session {
  id          String    @id
  expiresAt   DateTime
  userId      String
  refreshedAt DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Ticket {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  title     String
  content   String       @db.VarChar(1024)
  status    TicketStatus @default(OPEN)
  bounty    Int
  deadline  String
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  @@index([userId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}

model Comment {
  id          String     @id   @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  content     String     @db.VarChar(1024)
  userId      String?
  ticketId    String
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  ticket      Ticket     @relation(fields: [ticketId], references: [id], onDelete: Cascade )

  @@index([ticketId])
  @@index([userId])
}
