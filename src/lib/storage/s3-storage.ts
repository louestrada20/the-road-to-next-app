import { DeleteObjectCommand, GetObjectCommand,PutObjectCommand } from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";
import { s3 } from "@/lib/aws";
import { FileMetadata, UploadOptions } from "./types";

// Configuration
const BUCKET_NAME = process.env.AWS_BUCKET_NAME!;
const REGION = process.env.AWS_REGION || 'us-west-1';

// Build S3 key helpers (new unified layout)
const buildKey = (id: string, name: string, thumb = false) =>
  `uploads/${id}/${thumb ? 'thumbnails/' : ''}${name}`;

// Helper functions
const generateFileId = (): string => {
  return `file_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

// Main storage functions
export const uploadFileToS3 = async (
  file: File,
  options?: UploadOptions,
  customFileId?: string
): Promise<FileMetadata> => {
  const fileId = customFileId || generateFileId();
  const buffer = Buffer.from(await file.arrayBuffer());
  const key = `uploads/${fileId}/${file.name}`; // unified key pattern

  // Upload original file
  await s3.send(new PutObjectCommand({
    Bucket: BUCKET_NAME,
    Key: key,
    Body: buffer,
    ContentType: file.type,
    Metadata: options?.metadata,
  }));

  let thumbnailKey: string | undefined;

  // Thumbnail generation is handled asynchronously by AWS Lambda.

  const fileMetadata: FileMetadata = {
    id: fileId,
    name: file.name,
    size: file.size,
    mimeType: file.type,
    s3Key: key,
    thumbnailKey,
    url: key, // legacy
    thumbnailUrl: thumbnailKey,
    uploadedAt: new Date(),
  };

  return fileMetadata;
};

export const deleteFileFromS3 = async (fileId: string, fileName: string): Promise<void> => {
  const originalKey = buildKey(fileId, fileName, false);
  const thumbKey    = buildKey(fileId, fileName, true);

  await s3.send(new DeleteObjectCommand({ Bucket: BUCKET_NAME, Key: originalKey }));
  // try delete thumbnail; ignore if missing
  try {
    await s3.send(new DeleteObjectCommand({ Bucket: BUCKET_NAME, Key: thumbKey }));
  } catch {}
};

export const getS3FileUrl = async (
  fileId: string,
  fileName: string,
  options?: { thumbnail?: boolean },
): Promise<string> => {
  const key = buildKey(fileId, fileName, options?.thumbnail);
  return getSignedUrl(
    s3,
    new GetObjectCommand({ Bucket: BUCKET_NAME, Key: key }),
    { expiresIn: 300 },
  );
};

// export const generateThumbnailForS3 = async (
//   fileId: string,
//   fileName: string,
//   originalBuffer: Buffer,
//   options?: UploadOptions['thumbnailOptions']
// ): Promise<string> => {
//   // no-op – thumbnail generation moved to Lambda
//   throw new Error('generateThumbnailForS3 is deprecated. Thumbnails are now generated by Lambda.');
// };

// export const generateThumbnailForExistingS3File = async (
//   fileId: string,
//   fileName: string,
//   options?: UploadOptions['thumbnailOptions']
// ): Promise<string> => {
//   // no-op – thumbnail generation moved to Lambda
//   throw new Error('generateThumbnailForExistingS3File is deprecated. Thumbnails are now generated by Lambda.');
// }; 